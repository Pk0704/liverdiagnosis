@author: peterk
"""

import pandas as pd
import numpy as np
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import StandardScaler

# Load the data
df = pd.read_csv('indian_liver_patient 3.csv')

# Drop rows with unknowns
df = df.dropna()

# Selecting features and target
features = ['Age', 'Total_Bilirubin', 'Direct_Bilirubin', 'Alkaline_Phosphotase', 'Alamine_Aminotransferase', 'Aspartate_Aminotransferase', 'Total_Protiens', 'Albumin', 'Albumin_and_Globulin_Ratio']
target = 'Dataset'

# Splitting the data into training and testing sets
X = df[features]
y = df[target]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Standardize the data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Apply PCA with the Kaiser criterion
pca = PCA().fit(X_train_scaled)
n_components = sum(pca.explained_variance_ > 1)  # Kaiser criterion
pca = PCA(n_components=n_components)
X_train_pca = pca.fit_transform(X_train_scaled)
X_test_pca = pca.transform(X_test_scaled)

# Creating the model using Decision Tree
model = DecisionTreeClassifier(random_state=0)
model.fit(X_train_pca, y_train)

# Making predictions
y_pred = model.predict(X_test_pca)

# Calculating the performance metrics
accuracy = accuracy_score(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

# Output the performance metrics
print(f'Accuracy: {accuracy}')
print(f'Classification Report: \n{class_report}')
print(f'Number of PCA Components Used: {n_components}')
